/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 public/models/64c9165f588332d805ce4b8f.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useFBX, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useControls } from 'leva'
import * as THREE from 'three'

export function Avatar(props) {
    const { animation } = props

    // Add controls to the Leva panel
    const { headFollow, cursorFollow, wireframe } = useControls({
        headFollow: false,
        cursorFollow: false,
        wireframe: false
    })

    // This reference will give us direct access to the mesh
    const group = useRef()
    const { nodes, materials } = useGLTF('models/64c9165f588332d805ce4b8f.glb')
    const { animations: typingAnimation } = useFBX('animations/Typing.fbx')
    const { animations: standingAnimation } = useFBX('animations/Idle.fbx')
    const { animations: fallingAnimation } = useFBX('animations/Falling.fbx')

    // Rename the animation to something more meaningful
    typingAnimation[0].name = "Typing"
    standingAnimation[0].name = "Idle"
    fallingAnimation[0].name = "Falling"

    // Get a list of all the actions
    const { actions } = useAnimations(
        [typingAnimation[0], standingAnimation[0], fallingAnimation[0]],
        group
    )

    // Rotate the head to look at the camera or cursor
    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName("Spine2").lookAt(state.camera.position)
        }
        if (cursorFollow) {
            const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1)
            group.current.getObjectByName("Head").lookAt(target)

        }
    })

    // Play the Typing animation on mount
    useEffect(() => {
        actions[animation].reset().fadeIn(0.5).play()
        return () => {
            actions[animation].reset().fadeOut(0.5)
        }
    }, [animation])

    // Toggle wireframe
    useEffect(() => {
        Object.values(materials).forEach((material) => {
            material.wireframe = wireframe
        }
        )
    }, [wireframe])

    return (
        // Rotate the avatar to face the camera
        <group rotation-x={-Math.PI / 2}>
            <group {...props} ref={group} dispose={null}>
                <primitive object={nodes.Hips} />
                <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
                <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
                <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
                <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
                <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
            </group>
        </group>
    )
}

useGLTF.preload('models/64c9165f588332d805ce4b8f.glb')
